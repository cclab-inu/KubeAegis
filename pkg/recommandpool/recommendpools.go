package recommandpool

type APIMethod struct {
	Name        string
	Description string
}

func GetNetworkAPIMethods() []APIMethod {
	return networkAPIMethods
}

func GetSystemAPIMethods() []APIMethod {
	return systemAPIMethods
}

func GetClusterAPIMethods() []APIMethod {
	return clusterAPIMethods
}

func GetAllAPIMethods() []APIMethod {
	return append(append(networkAPIMethods, systemAPIMethods...), clusterAPIMethods...)
}

// ==========================================================
// API method pool

// Network API method pool
var networkAPIMethods = []APIMethod{
	// Calico API methods
	{Name: "CreateIngressPodSelectorRule", Description: "This function generates ingress rules with pod selectors for Calico. It processes the 'From' field in the intent request, which specifies the source pods that need to be allowed access. The function extracts labels from the 'From' field to create Calico-controlled endpoints selectors, which are then used to define ingress rules that permit traffic from packets from Calico-controlled endpointss."},
	{Name: "CreateEgressPodSelectorRule", Description: "This function generates egress rules with pod selectors for Calico. It processes the 'To' field in the intent request, which specifies the destination pods that need to be allowed access. The function extracts labels from the 'To' field to create Calico-controlled endpoints selectors, which are then used to define egress rules that permit traffic to packets from Calico-controlled endpoints."},
	{Name: "CreateIngressNamespaceSelectorRule", Description: "This function generates ingress rules with NamespaceSelector for Calico. It processes the 'From' field in the intent request, which specifies the source selected namespaces that need to be allowed access. The function extracts labels from the 'From' field to create NamespaceSelector, which are then used to define ingress rules that permit traffic from the specified namespaces."},
	{Name: "CreateEgressNamespaceSelectorRule", Description: "This function generates egress rules with NamespaceSelector for Calico. It processes the 'To' field in the intent request, which specifies the destination selected namespaces that need to be allowed access. The function extracts labels from the 'To' field to create NamespaceSelector, which are then used to define egress rules that permit traffic to the specified namespaces."},
	{Name: "CreateIngressServiceAccountsSelectorRule", Description: "This function generates ingress rules with ServiceAccount selectors for Calico. It processes the 'From' field in the intent request, which specifies the source service accounts that need to be allowed access. The function extracts labels from the 'From' field to create service account selectors, which are then used to define ingress rules that permit traffic from the specified service accounts."},
	{Name: "CreateEgressServiceAccountSelectorRule", Description: "This function generates egress rules with ServiceAccount selectors for Calico. It processes the 'To' field in the intent request, which specifies the destination service accounts that need to be allowed access. The function extracts labels from the 'To' field to create service account selectors, which are then used to define egress rules that permit traffic to the specified service accounts."},
	{Name: "CreateIngressProtocolRule", Description: "This function generates ingress rules with specific IP protocol for Calico. It processes the 'From' field in the intent request, which specifies the source protocols that need to be allowed access. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols). The function extracts the protocol details from the 'From' field and creates ingress rules that permit traffic from the specified protocols."},
	{Name: "CreateEgressProtocolRule", Description: "This function generates egress rules with specific IP protocol for Calico. It processes the 'To' field in the intent request, which specifies the destination protocols that need to be allowed access. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols). The function extracts the protocol details from the 'To' field and creates egress rules that permit traffic to the specified protocols."},
	{Name: "CreateIngressNotProtocolRule", Description: "This function generates ingress rules that deny traffic from specified protocols for Calico. It processes the 'From' field in the intent request, which lists the protocols that should be denied. The function extracts protocol details from the 'From' field and creates rules to block ingress traffic using these protocols, enhancing security by excluding unwanted protocol traffic."},
	{Name: "CreateEgressNotProtocolRule", Description: "This function generates egress rules that deny traffic to specified protocols for Calico. It processes the 'To' field in the intent request, which lists the protocols that should be denied. The function extracts protocol details from the 'To' field and creates rules to block egress traffic using these protocols, thus controlling egress traffic effectively by excluding certain protocols."},
	{Name: "CreateIngressCIDRNets", Description: "This function generates ingress rules with CIDR blocks for Calico. It processes the 'From' field in the intent request, which specifies the source CIDR blocks that need to be allowed access. The function iterates over the CIDR blocks listed in the 'From' field and creates ingress rules to permit traffic from these IP ranges."},
	{Name: "CreateEgressCIDRNets", Description: "This function generates egress rules with CIDR blocks for Calico. It processes the 'To' field in the intent request, which specifies the destination CIDR blocks that need to be allowed access. The function iterates over the CIDR blocks listed in the 'To' field and creates egress rules to permit traffic to these IP ranges."},
	{Name: "CreateIngressNotCIDRNets", Description: "This function generates ingress rules that deny traffic from specified CIDR blocks for Calico. It processes the 'From' field in the intent request, which lists the CIDR blocks to be denied. The function creates ingress rules that block traffic from these IP ranges, thus preventing unauthorized access from specified network segments."},
	{Name: "CreateEgressNotCIDRNets", Description: "This function generates egress rules that deny traffic to specified CIDR blocks for Calico. It processes the 'To' field in the intent request, which lists the CIDR blocks to be denied. The function creates egress rules that block traffic to these IP ranges, helping to prevent the risk of data leakage to unauthorized network segments."},
	{Name: "CreateIngressSinglePortRule", Description: "This function generates ingress rules with specific ports for Calico. It processes the 'From' field in the intent request, which specifies the source ports that need to be allowed access. The function creates ingress rules that permit traffic from the specified ports."},
	{Name: "CreateEgressSinglePortRule", Description: "This function generates egress rules with specific ports for Calico. It processes the 'To' field in the intent request, which specifies the destination ports that need to be allowed access. The function creates egress rules that permit traffic to the specified ports."},
	{Name: "CreateHTTPRules", Description: "This function generates HTTP Match rules for Calico. It processes the action points, which specify the HTTP methods and paths that need to be allowed. The function creates HTTP match rules that permit traffic matching the specified methods and paths."},
	{Name: "CreateIngressICMPRule", Description: "This function generates ingress rules with ICMP settings for Calico. ICMP is an optional field that restricts the rule to apply to a specific type and code of ICMP traffic. This should only be specified if the Protocol field is set to \"ICMP\" or \"ICMPv6\". It processes the 'From' field in the intent request, which specifies the source ICMP settings that need to be allowed access. The function creates ingress rules that permit traffic matching the specific type and code of ICMP traffic."},
	{Name: "CreateEgressICMPRule", Description: "This function generates egress rules with ICMP settings for Calico. ICMP is an optional field that restricts the rule to apply to a specific type and code of ICMP traffic. This should only be specified if the Protocol field is set to \"ICMP\" or \"ICMPv6\".  It processes the 'To' field in the intent request, which specifies the destination ICMP settings that need to be allowed access. The function creates egress rules that permit traffic matching the specific type and code of ICMP traffic."},
	{Name: "CreateActionRule", Description: "This function generates rules with specific actions for Calico. It processes the 'Action' field in the intent request, which specifies the actions that need to be applied. The function creates rules that apply the specified actions, such as 'Allow', 'Deny', 'Log', and others."},

	// Cilium API methods
	{Name: "CreateIngressEndpointSelectorRule", Description: "This function generates ingress rules with endpoint selectors for Cilium. It processes the 'From' field in the intent request, which specifies the source endpoints that need to be allowed access. The function extracts labels from the 'From' field to create endpoint selectors, which are then used to define ingress rules that allow traffic from the specified endpoints."},
	{Name: "CreateIngressDenyEndpointSelectorRule", Description: "This function generates ingress deny rules with endpoint selectors for Cilium. It processes the 'From' field in the intent request, which specifies the source endpoints that need to be denied access. The function extracts labels from the 'From' field to create endpoint selectors, which are then used to define ingress deny rules that prevent traffic from the specified endpoints."},
	{Name: "CreateEgressEndpointSelectorRule", Description: "This function generates egress rules with endpoint selectors for Cilium. It processes the 'To' field in the intent request, which specifies the destination endpoints that need to be allowed access. The function extracts labels from the 'To' field to create endpoint selectors, which are then used to define egress rules that allow traffic to the specified endpoints."},
	{Name: "CreateEgressDenyEndpointSelectorRule", Description: "This function generates egress deny rules with endpoint selectors for Cilium. It processes the 'To' field in the intent request, which specifies the destination endpoints that need to be denied access. The function extracts labels from the 'To' field to create endpoint selectors, which are then used to define egress deny rules that prevent traffic to the specified endpoints."},
	{Name: "CreateIngressEntitiesRule", Description: "This function generates ingress rules with entities for Cilium. It processes the 'From' field in the intent request, which specifies the source entities that need to be allowed access. The function iterates over the entities listed in the 'From' field and creates ingress rules to allow traffic from these entities."},
	{Name: "CreateIngressDenyEntitiesRule", Description: "This function generates ingress deny rules with entities for Cilium. It processes the 'From' field in the intent request, which specifies the source entities that need to be denied access. The function iterates over the entities listed in the 'From' field and creates ingress deny rules to block traffic from these entities."},
	{Name: "CreateEgressEntitiesRule", Description: "This function generates egress rules with entities for Cilium. It processes the 'To' field in the intent request, which specifies the destination entities that need to be allowed access. The function iterates over the entities listed in the 'To' field and creates egress rules to allow traffic to these entities."},
	{Name: "CreateEgressDenyEntitiesRule", Description: "This function generates egress deny rules with entities for Cilium. It processes the 'To' field in the intent request, which specifies the destination entities that need to be denied access. The function iterates over the entities listed in the 'To' field and creates egress deny rules to block traffic to these entities."},
	{Name: "CreateIngressCIDRRule", Description: "This function generates ingress rules with CIDR blocks for Cilium. It processes the 'From' field in the intent request, which specifies the source CIDR blocks that need to be allowed access. The function iterates over the CIDR blocks listed in the 'From' field and creates ingress rules to allow traffic from these IP ranges."},
	{Name: "CreateIngressDenyCIDRRule", Description: "This function generates ingress deny rules with CIDR blocks for Cilium. It processes the 'From' field in the intent request, which specifies the source CIDR blocks that need to be denied access. The function iterates over the CIDR blocks listed in the 'From' field and creates ingress deny rules to block traffic from these IP ranges."},
	{Name: "CreateEgressCIDRRule", Description: "This function generates egress rules with CIDR blocks for Cilium. It processes the 'To' field in the intent request, which specifies the destination CIDR blocks that need to be allowed access. The function iterates over the CIDR blocks listed in the 'To' field and creates egress rules to allow traffic to these IP ranges."},
	{Name: "CreateEgressDenyCIDRRule", Description: "This function generates egress deny rules with CIDR blocks for Cilium. It processes the 'To' field in the intent request, which specifies the destination CIDR blocks that need to be denied access. The function iterates over the CIDR blocks listed in the 'To' field and creates egress deny rules to block traffic to these IP ranges."},
	{Name: "CreateEgressFQDNsRule", Description: "This function generates egress rules with FQDNs for Cilium. It processes the 'To' field in the intent request, which specifies the destination FQDNs that need to be allowed access. The function iterates over the FQDNs listed in the 'To' field and creates egress rules to allow traffic to these FQDNs."},
	{Name: "CreateEgressDenyPortRule", Description: "This function generates egress deny rules with specific ports for Cilium. It processes the 'To' field in the intent request, which specifies the destination ports that need to be denied access. The function creates egress deny rules that block traffic to the specified ports, ensuring that traffic cannot reach these destinations."},
	{Name: "CreateEgressICMPField", Description: "This function generates egress rules with ICMP types for Cilium. It processes the 'To' field in the intent request, which specifies the destination ICMP types that need to be allowed access. The function iterates over the ICMP types listed in the 'To' field and creates egress rules to allow traffic to these ICMP types."},
	{Name: "CreateEgressDenyICMPField", Description: "This function generates egress deny rules with ICMP types for Cilium. It processes the 'To' field in the intent request, which specifies the destination ICMP types that need to be denied access. The function iterates over the ICMP types listed in the 'To' field and creates egress deny rules to block traffic to these ICMP types."},
	{Name: "CreateIngressICMPField", Description: "This function generates ingress rules with ICMP types for Cilium. It processes the 'From' field in the intent request, which specifies the source ICMP types that need to be allowed access. The function iterates over the ICMP types listed in the 'From' field and creates ingress rules to allow traffic from these ICMP types."},
	{Name: "CreateIngressDenyICMPField", Description: "This function generates ingress deny rules with ICMP types for Cilium. It processes the 'From' field in the intent request, which specifies the source ICMP types that need to be denied access. The function iterates over the ICMP types listed in the 'From' field and creates ingress deny rules to block traffic from these ICMP types."},
	{Name: "CreateEgressServiceRule", Description: "This function generates egress deny rules with services for Cilium. It processes the 'To' field in the intent request, which specifies the destination services that need to be denied access. The function iterates over the services listed in the 'To' field and creates egress deny rules to block traffic to these services."},
	{Name: "CreateEgressDNSRule", Description: "This function generates egress rules with DNS constraints for Cilium. It processes the 'To' field in the intent request, which specifies the destination DNS constraints. The function creates egress rules that block traffic based on these DNS constraints."},
	{Name: "CreateIngressDNSRule", Description: "This function generates ingress rules with DNS constraints for Cilium. It processes the 'From' field in the intent request, which specifies the source DNS constraints. The function creates ingress rules that allow traffic based on these DNS constraints."},
	{Name: "CreateEgressHTTPSRule", Description: "This function generates egress rules with HTTPS constraints for Cilium. It processes the 'To' field in the intent request, which specifies the destination HTTPS constraints. The function creates egress rules that block traffic based on these HTTPS constraints."},
	{Name: "CreateIngressHTTPSRule", Description: "This function generates ingress rules with HTTPS constraints for Cilium. It processes the 'From' field in the intent request, which specifies the source HTTPS constraints. The function creates ingress rules that allow traffic based on these HTTPS constraints."},
}

// System API method pool
var systemAPIMethods = []APIMethod{
	// Kubearmor API methods
	{Name: "SetDefaultValues", Description: "This function sets default values for a KubeArmor policy. It ensures that if no specific network protocols or capabilities are matched, the policy defaults to allowing 'raw' network protocol and 'lease' capability. This helps maintain a baseline security posture even when specific details are not provided."},
	{Name: "HandleProcessPath", Description: "This function adds process path matches to a KubeArmor policy. It allows the policy to specify which process paths are allowed or denied. For example, specifying '/usr/bin/wget' ensures that only this process path is monitored or controlled by the policy, providing fine-grained control over process execution."},
	{Name: "HandleProcessPattern", Description: "This function adds process pattern matches to a KubeArmor policy. It enables pattern matching for process names. For instance, a pattern like 'wget*' can be used to match all processes starting with 'wget', offering more flexible process control."},
	{Name: "HandleProcessDirectory", Description: "This function adds process directory matches to a KubeArmor policy. It specifies directories that processes can access. For example, '/var/log' ensures that processes are only allowed to access the '/var/log' directory, providing directory-level control over process execution."},
	{Name: "HandleFilePath", Description: "This function adds file path matches to a KubeArmor policy. It allows the policy to specify which file paths are accessible. For instance, specifying '/etc/passwd' ensures that only this file path is monitored or controlled by the policy, enhancing security by restricting file access."},
	{Name: "HandleFilePattern", Description: "This function adds file pattern matches to a KubeArmor policy. It enables pattern matching for file names. For example, a pattern like '*.conf' can be used to match all configuration files, providing flexible control over file access based on naming patterns."},
	{Name: "HandleFileDirectory", Description: "This function adds file directory matches to a KubeArmor policy. It specifies directories that files can be accessed from. For instance, specifying '/etc' ensures that files in the '/etc' directory are monitored or controlled by the policy, providing directory-level control over file access."},
	{Name: "HandleNetworkProtocol", Description: "This function adds network protocol matches to a KubeArmor policy. It allows the policy to specify which network protocols are allowed. For example, allowing 'TCP' ensures that only TCP traffic is permitted, enhancing network security by restricting protocol usage."},
	{Name: "HandleCapabilities", Description: "This function adds capability matches to a KubeArmor policy. It specifies Linux capabilities that processes can have. For instance, allowing 'NET_ADMIN' ensures that only processes with the 'NET_ADMIN' capability are permitted, providing fine-grained control over process capabilities."},
	{Name: "HandleSyscallPath", Description: "This function adds syscall path matches to a KubeArmor policy. It specifies paths for system calls, helping to control which system calls can be made from which paths. For example, specifying '/bin/ls' ensures that only the 'ls' command is monitored or controlled by the policy, enhancing syscall-level security."},
	{Name: "HandleSyscall", Description: "This function adds syscall matches to a KubeArmor policy. It allows the policy to specify which system calls are permissible, controlling system-level interactions. For instance, allowing 'open' ensures that only the 'open' syscall is permitted, providing fine-grained control over system calls."},

	// tetragon API methods
	{Name: "ConvertContainerSelector", Description: "This function converts a container selector from a KubeAegisPolicy to a Tetragon container selector. It maps match expressions and labels to the appropriate Tetragon format. For example, converting a selector for a specific container label 'app=web' ensures that the same selector is used in Tetragon."},
	{Name: "ConvertEnforcers", Description: "This function converts enforcers from a KubeAegisPolicy to Tetragon enforcers. It maps the enforcement actions from KubeAegis to Tetragon's format. For instance, converting an enforcement action like 'deny' ensures that the same action is enforced in Tetragon."},
	{Name: "ConvertKprobes", Description: "This function converts kprobes from a KubeAegisPolicy to Tetragon kprobes. It translates the kprobe specifications including call paths, arguments, selectors, and tags. For example, converting a kprobe for monitoring 'sys_open' syscall ensures that the same monitoring is applied in Tetragon."},
	{Name: "ConvertPodSelector", Description: "This function converts a pod selector from a KubeAegisPolicy to a Tetragon pod selector. It translates match expressions and labels to match the Tetragon format. For example, converting a selector for pods with label 'role=frontend' ensures that the same selector is used in Tetragon."},
	{Name: "ConvertLists", Description: "This function converts lists from a KubeAegisPolicy to Tetragon lists. It maps list specifications including names, patterns, types, and validation flags. For instance, converting a list of allowed syscalls ensures that the same list is enforced in Tetragon, maintaining consistent security policies across platforms."},
}

// Cluster API method pool
var clusterAPIMethods = []APIMethod{
	// kyverno API methods
	{Name: "HandleMutateAnnotations", Description: "This function handles mutation rules for annotations in Kyverno policies. It processes intent requests specifying annotations to be mutated, generates a patch for the annotations, and returns a mutation object."},
	{Name: "HandleMutateLabels", Description: "This function handles mutation rules for labels in Kyverno policies. It processes intent requests specifying labels to be mutated, generates a patch for the labels, and returns a mutation object."},
	{Name: "HandleValidateCEL", Description: "This function handles validation rules for CEL expressions in Kyverno policies. It processes intent requests specifying CEL expressions for validation and returns a validation object."},
	{Name: "HandleValidatePodSecurity", Description: "This function handCreateIngressProtocolRuleles validation rules for pod security in Kyverno policies. It processes intent requests specifying pod security levels and versions, and returns a validation object."},
	{Name: "HandleValidateDeny", Description: "This function handles validation rules for deny conditions in Kyverno policies. It processes intent requests specifying conditions for denying resources, and returns a validation object with the specified conditions."},
	{Name: "HandleValidatePattern", Description: "This function handles validation rules for patterns in Kyverno policies. It processes intent requests specifying patterns for validation and returns a validation object with the specified patterns."},
	{Name: "HandleVerifyImage", Description: "This function handles image verification rules in Kyverno policies. It processes intent requests specifying images to be verified, and returns an image verification object with the specified verification details."},
}

var apiMethods = []APIMethod{
	// Calico API methods
	{Name: "CreateIngressPodSelectorRule", Description: "This function generates ingress rules with pod selectors for Calico. It processes the 'From' field in the intent request, which specifies the source pods that need to be allowed access. The function extracts labels from the 'From' field to create Calico-controlled endpoints selectors, which are then used to define ingress rules that permit traffic from packets from Calico-controlled endpointss."},
	{Name: "CreateEgressPodSelectorRule", Description: "This function generates egress rules with pod selectors for Calico. It processes the 'To' field in the intent request, which specifies the destination pods that need to be allowed access. The function extracts labels from the 'To' field to create Calico-controlled endpoints selectors, which are then used to define egress rules that permit traffic to packets from Calico-controlled endpoints."},
	{Name: "CreateIngressNamespaceSelectorRule", Description: "This function generates ingress rules with NamespaceSelector for Calico. It processes the 'From' field in the intent request, which specifies the source selected namespaces that need to be allowed access. The function extracts labels from the 'From' field to create NamespaceSelector, which are then used to define ingress rules that permit traffic from the specified namespaces."},
	{Name: "CreateEgressNamespaceSelectorRule", Description: "This function generates egress rules with NamespaceSelector for Calico. It processes the 'To' field in the intent request, which specifies the destination selected namespaces that need to be allowed access. The function extracts labels from the 'To' field to create NamespaceSelector, which are then used to define egress rules that permit traffic to the specified namespaces."},
	{Name: "CreateIngressServiceAccountsSelectorRule", Description: "This function generates ingress rules with ServiceAccount selectors for Calico. It processes the 'From' field in the intent request, which specifies the source service accounts that need to be allowed access. The function extracts labels from the 'From' field to create service account selectors, which are then used to define ingress rules that permit traffic from the specified service accounts."},
	{Name: "CreateEgressServiceAccountSelectorRule", Description: "This function generates egress rules with ServiceAccount selectors for Calico. It processes the 'To' field in the intent request, which specifies the destination service accounts that need to be allowed access. The function extracts labels from the 'To' field to create service account selectors, which are then used to define egress rules that permit traffic to the specified service accounts."},
	{Name: "CreateIngressProtocolRule", Description: "This function generates ingress rules with specific IP protocol for Calico. It processes the 'From' field in the intent request, which specifies the source protocols that need to be allowed access. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols). The function extracts the protocol details from the 'From' field and creates ingress rules that permit traffic from the specified protocols."},
	{Name: "CreateEgressProtocolRule", Description: "This function generates egress rules with specific IP protocol for Calico. It processes the 'To' field in the intent request, which specifies the destination protocols that need to be allowed access. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols). The function extracts the protocol details from the 'To' field and creates egress rules that permit traffic to the specified protocols."},
	{Name: "CreateIngressNotProtocolRule", Description: "This function generates ingress rules that deny traffic from specified protocols for Calico. It processes the 'From' field in the intent request, which lists the protocols that should be denied. The function extracts protocol details from the 'From' field and creates rules to block ingress traffic using these protocols, enhancing security by excluding unwanted protocol traffic."},
	{Name: "CreateEgressNotProtocolRule", Description: "This function generates egress rules that deny traffic to specified protocols for Calico. It processes the 'To' field in the intent request, which lists the protocols that should be denied. The function extracts protocol details from the 'To' field and creates rules to block egress traffic using these protocols, thus controlling egress traffic effectively by excluding certain protocols."},
	{Name: "CreateIngressCIDRNets", Description: "This function generates ingress rules with CIDR blocks for Calico. It processes the 'From' field in the intent request, which specifies the source CIDR blocks that need to be allowed access. The function iterates over the CIDR blocks listed in the 'From' field and creates ingress rules to permit traffic from these IP ranges."},
	{Name: "CreateEgressCIDRNets", Description: "This function generates egress rules with CIDR blocks for Calico. It processes the 'To' field in the intent request, which specifies the destination CIDR blocks that need to be allowed access. The function iterates over the CIDR blocks listed in the 'To' field and creates egress rules to permit traffic to these IP ranges."},
	{Name: "CreateIngressNotCIDRNets", Description: "This function generates ingress rules that deny traffic from specified CIDR blocks for Calico. It processes the 'From' field in the intent request, which lists the CIDR blocks to be denied. The function creates ingress rules that block traffic from these IP ranges, thus preventing unauthorized access from specified network segments."},
	{Name: "CreateEgressNotCIDRNets", Description: "This function generates egress rules that deny traffic to specified CIDR blocks for Calico. It processes the 'To' field in the intent request, which lists the CIDR blocks to be denied. The function creates egress rules that block traffic to these IP ranges, helping to prevent the risk of data leakage to unauthorized network segments."},
	{Name: "CreateIngressSinglePortRule", Description: "This function generates ingress rules with specific ports for Calico. It processes the 'From' field in the intent request, which specifies the source ports that need to be allowed access. The function creates ingress rules that permit traffic from the specified ports."},
	{Name: "CreateEgressSinglePortRule", Description: "This function generates egress rules with specific ports for Calico. It processes the 'To' field in the intent request, which specifies the destination ports that need to be allowed access. The function creates egress rules that permit traffic to the specified ports."},
	{Name: "CreateHTTPRules", Description: "This function generates HTTP Match rules for Calico. It processes the action points, which specify the HTTP methods and paths that need to be allowed. The function creates HTTP match rules that permit traffic matching the specified methods and paths."},
	{Name: "CreateIngressICMPRule", Description: "This function generates ingress rules with ICMP settings for Calico. ICMP is an optional field that restricts the rule to apply to a specific type and code of ICMP traffic. This should only be specified if the Protocol field is set to \"ICMP\" or \"ICMPv6\". It processes the 'From' field in the intent request, which specifies the source ICMP settings that need to be allowed access. The function creates ingress rules that permit traffic matching the specific type and code of ICMP traffic."},
	{Name: "CreateEgressICMPRule", Description: "This function generates egress rules with ICMP settings for Calico. ICMP is an optional field that restricts the rule to apply to a specific type and code of ICMP traffic. This should only be specified if the Protocol field is set to \"ICMP\" or \"ICMPv6\".  It processes the 'To' field in the intent request, which specifies the destination ICMP settings that need to be allowed access. The function creates egress rules that permit traffic matching the specific type and code of ICMP traffic."},
	{Name: "CreateActionRule", Description: "This function generates rules with specific actions for Calico. It processes the 'Action' field in the intent request, which specifies the actions that need to be applied. The function creates rules that apply the specified actions, such as 'Allow', 'Deny', 'Log', and others."},

	// Cilium API methods
	{Name: "CreateIngressEndpointSelectorRule", Description: "This function generates ingress rules with endpoint selectors for Cilium. It processes the 'From' field in the intent request, which specifies the source endpoints that need to be allowed access. The function extracts labels from the 'From' field to create endpoint selectors, which are then used to define ingress rules that allow traffic from the specified endpoints."},
	{Name: "CreateIngressDenyEndpointSelectorRule", Description: "This function generates ingress deny rules with endpoint selectors for Cilium. It processes the 'From' field in the intent request, which specifies the source endpoints that need to be denied access. The function extracts labels from the 'From' field to create endpoint selectors, which are then used to define ingress deny rules that prevent traffic from the specified endpoints."},
	{Name: "CreateEgressEndpointSelectorRule", Description: "This function generates egress rules with endpoint selectors for Cilium. It processes the 'To' field in the intent request, which specifies the destination endpoints that need to be allowed access. The function extracts labels from the 'To' field to create endpoint selectors, which are then used to define egress rules that allow traffic to the specified endpoints."},
	{Name: "CreateEgressDenyEndpointSelectorRule", Description: "This function generates egress deny rules with endpoint selectors for Cilium. It processes the 'To' field in the intent request, which specifies the destination endpoints that need to be denied access. The function extracts labels from the 'To' field to create endpoint selectors, which are then used to define egress deny rules that prevent traffic to the specified endpoints."},
	{Name: "CreateIngressEntitiesRule", Description: "This function generates ingress rules with entities for Cilium. It processes the 'From' field in the intent request, which specifies the source entities that need to be allowed access. The function iterates over the entities listed in the 'From' field and creates ingress rules to allow traffic from these entities."},
	{Name: "CreateIngressDenyEntitiesRule", Description: "This function generates ingress deny rules with entities for Cilium. It processes the 'From' field in the intent request, which specifies the source entities that need to be denied access. The function iterates over the entities listed in the 'From' field and creates ingress deny rules to block traffic from these entities."},
	{Name: "CreateEgressEntitiesRule", Description: "This function generates egress rules with entities for Cilium. It processes the 'To' field in the intent request, which specifies the destination entities that need to be allowed access. The function iterates over the entities listed in the 'To' field and creates egress rules to allow traffic to these entities."},
	{Name: "CreateEgressDenyEntitiesRule", Description: "This function generates egress deny rules with entities for Cilium. It processes the 'To' field in the intent request, which specifies the destination entities that need to be denied access. The function iterates over the entities listed in the 'To' field and creates egress deny rules to block traffic to these entities."},
	{Name: "CreateIngressCIDRRule", Description: "This function generates ingress rules with CIDR blocks for Cilium. It processes the 'From' field in the intent request, which specifies the source CIDR blocks that need to be allowed access. The function iterates over the CIDR blocks listed in the 'From' field and creates ingress rules to allow traffic from these IP ranges."},
	{Name: "CreateIngressDenyCIDRRule", Description: "This function generates ingress deny rules with CIDR blocks for Cilium. It processes the 'From' field in the intent request, which specifies the source CIDR blocks that need to be denied access. The function iterates over the CIDR blocks listed in the 'From' field and creates ingress deny rules to block traffic from these IP ranges."},
	{Name: "CreateEgressCIDRRule", Description: "This function generates egress rules with CIDR blocks for Cilium. It processes the 'To' field in the intent request, which specifies the destination CIDR blocks that need to be allowed access. The function iterates over the CIDR blocks listed in the 'To' field and creates egress rules to allow traffic to these IP ranges."},
	{Name: "CreateEgressDenyCIDRRule", Description: "This function generates egress deny rules with CIDR blocks for Cilium. It processes the 'To' field in the intent request, which specifies the destination CIDR blocks that need to be denied access. The function iterates over the CIDR blocks listed in the 'To' field and creates egress deny rules to block traffic to these IP ranges."},
	{Name: "CreateEgressFQDNsRule", Description: "This function generates egress rules with FQDNs for Cilium. It processes the 'To' field in the intent request, which specifies the destination FQDNs that need to be allowed access. The function iterates over the FQDNs listed in the 'To' field and creates egress rules to allow traffic to these FQDNs."},
	{Name: "CreateEgressDenyPortRule", Description: "This function generates egress deny rules with specific ports for Cilium. It processes the 'To' field in the intent request, which specifies the destination ports that need to be denied access. The function creates egress deny rules that block traffic to the specified ports, ensuring that traffic cannot reach these destinations."},
	{Name: "CreateEgressICMPField", Description: "This function generates egress rules with ICMP types for Cilium. It processes the 'To' field in the intent request, which specifies the destination ICMP types that need to be allowed access. The function iterates over the ICMP types listed in the 'To' field and creates egress rules to allow traffic to these ICMP types."},
	{Name: "CreateEgressDenyICMPField", Description: "This function generates egress deny rules with ICMP types for Cilium. It processes the 'To' field in the intent request, which specifies the destination ICMP types that need to be denied access. The function iterates over the ICMP types listed in the 'To' field and creates egress deny rules to block traffic to these ICMP types."},
	{Name: "CreateIngressICMPField", Description: "This function generates ingress rules with ICMP types for Cilium. It processes the 'From' field in the intent request, which specifies the source ICMP types that need to be allowed access. The function iterates over the ICMP types listed in the 'From' field and creates ingress rules to allow traffic from these ICMP types."},
	{Name: "CreateIngressDenyICMPField", Description: "This function generates ingress deny rules with ICMP types for Cilium. It processes the 'From' field in the intent request, which specifies the source ICMP types that need to be denied access. The function iterates over the ICMP types listed in the 'From' field and creates ingress deny rules to block traffic from these ICMP types."},
	{Name: "CreateEgressServiceRule", Description: "This function generates egress deny rules with services for Cilium. It processes the 'To' field in the intent request, which specifies the destination services that need to be denied access. The function iterates over the services listed in the 'To' field and creates egress deny rules to block traffic to these services."},
	{Name: "CreateEgressDNSRule", Description: "This function generates egress rules with DNS constraints for Cilium. It processes the 'To' field in the intent request, which specifies the destination DNS constraints. The function creates egress rules that block traffic based on these DNS constraints."},
	{Name: "CreateIngressDNSRule", Description: "This function generates ingress rules with DNS constraints for Cilium. It processes the 'From' field in the intent request, which specifies the source DNS constraints. The function creates ingress rules that allow traffic based on these DNS constraints."},
	{Name: "CreateEgressHTTPSRule", Description: "This function generates egress rules with HTTPS constraints for Cilium. It processes the 'To' field in the intent request, which specifies the destination HTTPS constraints. The function creates egress rules that block traffic based on these HTTPS constraints."},
	{Name: "CreateIngressHTTPSRule", Description: "This function generates ingress rules with HTTPS constraints for Cilium. It processes the 'From' field in the intent request, which specifies the source HTTPS constraints. The function creates ingress rules that allow traffic based on these HTTPS constraints."},

	// Kubearmor API methods
	{Name: "SetDefaultValues", Description: "This function sets default values for a KubeArmor policy. It ensures that if no specific network protocols or capabilities are matched, the policy defaults to allowing 'raw' network protocol and 'lease' capability."},
	{Name: "HandleProcessPath", Description: "This function adds process path matches to a KubeArmor policy. It adds specified file paths that processes can access to the policy, helping control which paths can be used by processes."},
	{Name: "HandleProcessPattern", Description: "This function adds process pattern matches to a KubeArmor policy. It includes specified patterns for process names, allowing the policy to control which process names are permissible."},
	{Name: "HandleProcessDirectory", Description: "This function adds process directory matches to a KubeArmor policy. It specifies directories that processes are allowed to access, ensuring directory-level control over process execution."},
	{Name: "HandleFilePath", Description: "This function adds file path matches to a KubeArmor policy. It allows the policy to specify which file paths are accessible, providing fine-grained control over file access."},
	{Name: "HandleFilePattern", Description: "This function adds file pattern matches to a KubeArmor policy. It specifies patterns for file names, ensuring that only files matching the patterns can be accessed."},
	{Name: "HandleFileDirectory", Description: "This function adds file directory matches to a KubeArmor policy. It specifies directories that files can be accessed from, helping to control file access at the directory level."},
	{Name: "HandleNetworkProtocol", Description: "This function adds network protocol matches to a KubeArmor policy. It allows the policy to specify which network protocols are allowed, enhancing control over network traffic."},
	{Name: "HandleCapabilities", Description: "This function adds capability matches to a KubeArmor policy. It specifies Linux capabilities that processes can have, ensuring that only allowed capabilities are granted."},
	{Name: "HandleSyscallPath", Description: "This function adds syscall path matches to a KubeArmor policy. It specifies paths for system calls, helping to control which system calls can be made from which paths."},
	{Name: "HandleSyscall", Description: "This function adds syscall matches to a KubeArmor policy. It allows the policy to specify which system calls are permissible, controlling system-level interactions."},

	// tetragon API methods
	{Name: "ConvertContainerSelector", Description: "This function converts a container selector from a KubeAegisPolicy to a Tetragon container selector. It maps match expressions and labels to the appropriate Tetragon format."},
	{Name: "ConvertEnforcers", Description: "This function converts enforcers from a KubeAegisPolicy to Tetragon enforcers. It maps the enforcement actions from KubeAegis to Tetragon's format."},
	{Name: "ConvertKprobes", Description: "This function converts kprobes from a KubeAegisPolicy to Tetragon kprobes. It translates the kprobe specifications including call paths, arguments, selectors, and tags."},
	{Name: "ConvertPodSelector", Description: "This function converts a pod selector from a KubeAegisPolicy to a Tetragon pod selector. It translates match expressions and labels to match the Tetragon format."},
	{Name: "ConvertLists", Description: "This function converts lists from a KubeAegisPolicy to Tetragon lists. It maps list specifications including names, patterns, types, and validation flags."},

	// kyverno API methods
	{Name: "HandleMutateAnnotations", Description: "This function handles mutation rules for annotations in Kyverno policies. It processes intent requests specifying annotations to be mutated, generates a patch for the annotations, and returns a mutation object."},
	{Name: "HandleMutateLabels", Description: "This function handles mutation rules for labels in Kyverno policies. It processes intent requests specifying labels to be mutated, generates a patch for the labels, and returns a mutation object."},
	{Name: "HandleValidateCEL", Description: "This function handles validation rules for CEL expressions in Kyverno policies. It processes intent requests specifying CEL expressions for validation and returns a validation object."},
	{Name: "HandleValidatePodSecurity", Description: "This function handCreateIngressProtocolRuleles validation rules for pod security in Kyverno policies. It processes intent requests specifying pod security levels and versions, and returns a validation object."},
	{Name: "HandleValidateDeny", Description: "This function handles validation rules for deny conditions in Kyverno policies. It processes intent requests specifying conditions for denying resources, and returns a validation object with the specified conditions."},
	{Name: "HandleValidatePattern", Description: "This function handles validation rules for patterns in Kyverno policies. It processes intent requests specifying patterns for validation and returns a validation object with the specified patterns."},
	{Name: "HandleVerifyImage", Description: "This function handles image verification rules in Kyverno policies. It processes intent requests specifying images to be verified, and returns an image verification object with the specified verification details."},
}
