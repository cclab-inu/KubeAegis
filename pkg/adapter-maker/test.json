{"apiMethods":[{"Name":"CreateIngressPodSelectorRule","Description":"This function generates ingress rules with pod selectors for Calico. It processes the 'From' field in the intent request, which specifies the source pods that need to be allowed access. The function extracts labels from the 'From' field to create Calico-controlled endpoints selectors, which are then used to define ingress rules that permit traffic from packets from Calico-controlled endpointss."},{"Name":"CreateEgressPodSelectorRule","Description":"This function generates egress rules with pod selectors for Calico. It processes the 'To' field in the intent request, which specifies the destination pods that need to be allowed access. The function extracts labels from the 'To' field to create Calico-controlled endpoints selectors, which are then used to define egress rules that permit traffic to packets from Calico-controlled endpoints."},{"Name":"CreateIngressNamespaceSelectorRule","Description":"This function generates ingress rules with NamespaceSelector for Calico. It processes the 'From' field in the intent request, which specifies the source selected namespaces that need to be allowed access. The function extracts labels from the 'From' field to create NamespaceSelector, which are then used to define ingress rules that permit traffic from the specified namespaces."},{"Name":"CreateEgressNamespaceSelectorRule","Description":"This function generates egress rules with NamespaceSelector for Calico. It processes the 'To' field in the intent request, which specifies the destination selected namespaces that need to be allowed access. The function extracts labels from the 'To' field to create NamespaceSelector, which are then used to define egress rules that permit traffic to the specified namespaces."},{"Name":"CreateIngressServiceAccountsSelectorRule","Description":"This function generates ingress rules with ServiceAccount selectors for Calico. It processes the 'From' field in the intent request, which specifies the source service accounts that need to be allowed access. The function extracts labels from the 'From' field to create service account selectors, which are then used to define ingress rules that permit traffic from the specified service accounts."},{"Name":"CreateEgressServiceAccountSelectorRule","Description":"This function generates egress rules with ServiceAccount selectors for Calico. It processes the 'To' field in the intent request, which specifies the destination service accounts that need to be allowed access. The function extracts labels from the 'To' field to create service account selectors, which are then used to define egress rules that permit traffic to the specified service accounts."},{"Name":"CreateIngressProtocolRule","Description":"This function generates ingress rules with specific IP protocol for Calico. It processes the 'From' field in the intent request, which specifies the source protocols that need to be allowed access. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols). The function extracts the protocol details from the 'From' field and creates ingress rules that permit traffic from the specified protocols."},{"Name":"CreateEgressProtocolRule","Description":"This function generates egress rules with specific IP protocol for Calico. It processes the 'To' field in the intent request, which specifies the destination protocols that need to be allowed access. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols). The function extracts the protocol details from the 'To' field and creates egress rules that permit traffic to the specified protocols."},{"Name":"CreateIngressNotProtocolRule","Description":"This function generates ingress rules that deny traffic from specified protocols for Calico. It processes the 'From' field in the intent request, which lists the protocols that should be denied. The function extracts protocol details from the 'From' field and creates rules to block ingress traffic using these protocols, enhancing security by excluding unwanted protocol traffic."},{"Name":"CreateEgressNotProtocolRule","Description":"This function generates egress rules that deny traffic to specified protocols for Calico. It processes the 'To' field in the intent request, which lists the protocols that should be denied. The function extracts protocol details from the 'To' field and creates rules to block egress traffic using these protocols, thus controlling egress traffic effectively by excluding certain protocols."},{"Name":"CreateIngressCIDRNets","Description":"This function generates ingress rules with CIDR blocks for Calico. It processes the 'From' field in the intent request, which specifies the source CIDR blocks that need to be allowed access. The function iterates over the CIDR blocks listed in the 'From' field and creates ingress rules to permit traffic from these IP ranges."},{"Name":"CreateEgressCIDRNets","Description":"This function generates egress rules with CIDR blocks for Calico. It processes the 'To' field in the intent request, which specifies the destination CIDR blocks that need to be allowed access. The function iterates over the CIDR blocks listed in the 'To' field and creates egress rules to permit traffic to these IP ranges."},{"Name":"CreateIngressNotCIDRNets","Description":"This function generates ingress rules that deny traffic from specified CIDR blocks for Calico. It processes the 'From' field in the intent request, which lists the CIDR blocks to be denied. The function creates ingress rules that block traffic from these IP ranges, thus preventing unauthorized access from specified network segments."},{"Name":"CreateEgressNotCIDRNets","Description":"This function generates egress rules that deny traffic to specified CIDR blocks for Calico. It processes the 'To' field in the intent request, which lists the CIDR blocks to be denied. The function creates egress rules that block traffic to these IP ranges, helping to prevent the risk of data leakage to unauthorized network segments."},{"Name":"CreateIngressSinglePortRule","Description":"This function generates ingress rules with specific ports for Calico. It processes the 'From' field in the intent request, which specifies the source ports that need to be allowed access. The function creates ingress rules that permit traffic from the specified ports."},{"Name":"CreateEgressSinglePortRule","Description":"This function generates egress rules with specific ports for Calico. It processes the 'To' field in the intent request, which specifies the destination ports that need to be allowed access. The function creates egress rules that permit traffic to the specified ports."},{"Name":"CreateHTTPRules","Description":"This function generates HTTP Match rules for Calico. It processes the action points, which specify the HTTP methods and paths that need to be allowed. The function creates HTTP match rules that permit traffic matching the specified methods and paths."},{"Name":"CreateIngressICMPRule","Description":"This function generates ingress rules with ICMP settings for Calico. ICMP is an optional field that restricts the rule to apply to a specific type and code of ICMP traffic. This should only be specified if the Protocol field is set to \"ICMP\" or \"ICMPv6\". It processes the 'From' field in the intent request, which specifies the source ICMP settings that need to be allowed access. The function creates ingress rules that permit traffic matching the specific type and code of ICMP traffic."},{"Name":"CreateEgressICMPRule","Description":"This function generates egress rules with ICMP settings for Calico. ICMP is an optional field that restricts the rule to apply to a specific type and code of ICMP traffic. This should only be specified if the Protocol field is set to \"ICMP\" or \"ICMPv6\".  It processes the 'To' field in the intent request, which specifies the destination ICMP settings that need to be allowed access. The function creates egress rules that permit traffic matching the specific type and code of ICMP traffic."},{"Name":"CreateActionRule","Description":"This function generates rules with specific actions for Calico. It processes the 'Action' field in the intent request, which specifies the actions that need to be applied. The function creates rules that apply the specified actions, such as 'Allow', 'Deny', 'Log', and others."},{"Name":"CreateIngressEndpointSelectorRule","Description":"This function generates ingress rules with endpoint selectors for Cilium. It processes the 'From' field in the intent request, which specifies the source endpoints that need to be allowed access. The function extracts labels from the 'From' field to create endpoint selectors, which are then used to define ingress rules that allow traffic from the specified endpoints."},{"Name":"CreateIngressDenyEndpointSelectorRule","Description":"This function generates ingress deny rules with endpoint selectors for Cilium. It processes the 'From' field in the intent request, which specifies the source endpoints that need to be denied access. The function extracts labels from the 'From' field to create endpoint selectors, which are then used to define ingress deny rules that prevent traffic from the specified endpoints."},{"Name":"CreateEgressEndpointSelectorRule","Description":"This function generates egress rules with endpoint selectors for Cilium. It processes the 'To' field in the intent request, which specifies the destination endpoints that need to be allowed access. The function extracts labels from the 'To' field to create endpoint selectors, which are then used to define egress rules that allow traffic to the specified endpoints."},{"Name":"CreateEgressDenyEndpointSelectorRule","Description":"This function generates egress deny rules with endpoint selectors for Cilium. It processes the 'To' field in the intent request, which specifies the destination endpoints that need to be denied access. The function extracts labels from the 'To' field to create endpoint selectors, which are then used to define egress deny rules that prevent traffic to the specified endpoints."},{"Name":"CreateIngressEntitiesRule","Description":"This function generates ingress rules with entities for Cilium. It processes the 'From' field in the intent request, which specifies the source entities that need to be allowed access. The function iterates over the entities listed in the 'From' field and creates ingress rules to allow traffic from these entities."},{"Name":"CreateIngressDenyEntitiesRule","Description":"This function generates ingress deny rules with entities for Cilium. It processes the 'From' field in the intent request, which specifies the source entities that need to be denied access. The function iterates over the entities listed in the 'From' field and creates ingress deny rules to block traffic from these entities."},{"Name":"CreateEgressEntitiesRule","Description":"This function generates egress rules with entities for Cilium. It processes the 'To' field in the intent request, which specifies the destination entities that need to be allowed access. The function iterates over the entities listed in the 'To' field and creates egress rules to allow traffic to these entities."},{"Name":"CreateEgressDenyEntitiesRule","Description":"This function generates egress deny rules with entities for Cilium. It processes the 'To' field in the intent request, which specifies the destination entities that need to be denied access. The function iterates over the entities listed in the 'To' field and creates egress deny rules to block traffic to these entities."},{"Name":"CreateIngressCIDRRule","Description":"This function generates ingress rules with CIDR blocks for Cilium. It processes the 'From' field in the intent request, which specifies the source CIDR blocks that need to be allowed access. The function iterates over the CIDR blocks listed in the 'From' field and creates ingress rules to allow traffic from these IP ranges."},{"Name":"CreateIngressDenyCIDRRule","Description":"This function generates ingress deny rules with CIDR blocks for Cilium. It processes the 'From' field in the intent request, which specifies the source CIDR blocks that need to be denied access. The function iterates over the CIDR blocks listed in the 'From' field and creates ingress deny rules to block traffic from these IP ranges."},{"Name":"CreateEgressCIDRRule","Description":"This function generates egress rules with CIDR blocks for Cilium. It processes the 'To' field in the intent request, which specifies the destination CIDR blocks that need to be allowed access. The function iterates over the CIDR blocks listed in the 'To' field and creates egress rules to allow traffic to these IP ranges."},{"Name":"CreateEgressDenyCIDRRule","Description":"This function generates egress deny rules with CIDR blocks for Cilium. It processes the 'To' field in the intent request, which specifies the destination CIDR blocks that need to be denied access. The function iterates over the CIDR blocks listed in the 'To' field and creates egress deny rules to block traffic to these IP ranges."},{"Name":"CreateEgressFQDNsRule","Description":"This function generates egress rules with FQDNs for Cilium. It processes the 'To' field in the intent request, which specifies the destination FQDNs that need to be allowed access. The function iterates over the FQDNs listed in the 'To' field and creates egress rules to allow traffic to these FQDNs."},{"Name":"CreateEgressDenyPortRule","Description":"This function generates egress deny rules with specific ports for Cilium. It processes the 'To' field in the intent request, which specifies the destination ports that need to be denied access. The function creates egress deny rules that block traffic to the specified ports, ensuring that traffic cannot reach these destinations."},{"Name":"CreateEgressICMPField","Description":"This function generates egress rules with ICMP types for Cilium. It processes the 'To' field in the intent request, which specifies the destination ICMP types that need to be allowed access. The function iterates over the ICMP types listed in the 'To' field and creates egress rules to allow traffic to these ICMP types."},{"Name":"CreateEgressDenyICMPField","Description":"This function generates egress deny rules with ICMP types for Cilium. It processes the 'To' field in the intent request, which specifies the destination ICMP types that need to be denied access. The function iterates over the ICMP types listed in the 'To' field and creates egress deny rules to block traffic to these ICMP types."},{"Name":"CreateIngressICMPField","Description":"This function generates ingress rules with ICMP types for Cilium. It processes the 'From' field in the intent request, which specifies the source ICMP types that need to be allowed access. The function iterates over the ICMP types listed in the 'From' field and creates ingress rules to allow traffic from these ICMP types."},{"Name":"CreateIngressDenyICMPField","Description":"This function generates ingress deny rules with ICMP types for Cilium. It processes the 'From' field in the intent request, which specifies the source ICMP types that need to be denied access. The function iterates over the ICMP types listed in the 'From' field and creates ingress deny rules to block traffic from these ICMP types."},{"Name":"CreateEgressServiceRule","Description":"This function generates egress deny rules with services for Cilium. It processes the 'To' field in the intent request, which specifies the destination services that need to be denied access. The function iterates over the services listed in the 'To' field and creates egress deny rules to block traffic to these services."},{"Name":"CreateEgressDNSRule","Description":"This function generates egress rules with DNS constraints for Cilium. It processes the 'To' field in the intent request, which specifies the destination DNS constraints. The function creates egress rules that block traffic based on these DNS constraints."},{"Name":"CreateIngressDNSRule","Description":"This function generates ingress rules with DNS constraints for Cilium. It processes the 'From' field in the intent request, which specifies the source DNS constraints. The function creates ingress rules that allow traffic based on these DNS constraints."},{"Name":"CreateEgressHTTPSRule","Description":"This function generates egress rules with HTTPS constraints for Cilium. It processes the 'To' field in the intent request, which specifies the destination HTTPS constraints. The function creates egress rules that block traffic based on these HTTPS constraints."},{"Name":"CreateIngressHTTPSRule","Description":"This function generates ingress rules with HTTPS constraints for Cilium. It processes the 'From' field in the intent request, which specifies the source HTTPS constraints. The function creates ingress rules that allow traffic based on these HTTPS constraints."},{"Name":"SetDefaultValues","Description":"This function sets default values for a KubeArmor policy. It ensures that if no specific network protocols or capabilities are matched, the policy defaults to allowing 'raw' network protocol and 'lease' capability."},{"Name":"HandleProcessPath","Description":"This function adds process path matches to a KubeArmor policy. It adds specified file paths that processes can access to the policy, helping control which paths can be used by processes."},{"Name":"HandleProcessPattern","Description":"This function adds process pattern matches to a KubeArmor policy. It includes specified patterns for process names, allowing the policy to control which process names are permissible."},{"Name":"HandleProcessDirectory","Description":"This function adds process directory matches to a KubeArmor policy. It specifies directories that processes are allowed to access, ensuring directory-level control over process execution."},{"Name":"HandleFilePath","Description":"This function adds file path matches to a KubeArmor policy. It allows the policy to specify which file paths are accessible, providing fine-grained control over file access."},{"Name":"HandleFilePattern","Description":"This function adds file pattern matches to a KubeArmor policy. It specifies patterns for file names, ensuring that only files matching the patterns can be accessed."},{"Name":"HandleFileDirectory","Description":"This function adds file directory matches to a KubeArmor policy. It specifies directories that files can be accessed from, helping to control file access at the directory level."},{"Name":"HandleNetworkProtocol","Description":"This function adds network protocol matches to a KubeArmor policy. It allows the policy to specify which network protocols are allowed, enhancing control over network traffic."},{"Name":"HandleCapabilities","Description":"This function adds capability matches to a KubeArmor policy. It specifies Linux capabilities that processes can have, ensuring that only allowed capabilities are granted."},{"Name":"HandleSyscallPath","Description":"This function adds syscall path matches to a KubeArmor policy. It specifies paths for system calls, helping to control which system calls can be made from which paths."},{"Name":"HandleSyscall","Description":"This function adds syscall matches to a KubeArmor policy. It allows the policy to specify which system calls are permissible, controlling system-level interactions."},{"Name":"ConvertContainerSelector","Description":"This function converts a container selector from a KubeAegisPolicy to a Tetragon container selector. It maps match expressions and labels to the appropriate Tetragon format."},{"Name":"ConvertEnforcers","Description":"This function converts enforcers from a KubeAegisPolicy to Tetragon enforcers. It maps the enforcement actions from KubeAegis to Tetragon's format."},{"Name":"ConvertKprobes","Description":"This function converts kprobes from a KubeAegisPolicy to Tetragon kprobes. It translates the kprobe specifications including call paths, arguments, selectors, and tags."},{"Name":"ConvertPodSelector","Description":"This function converts a pod selector from a KubeAegisPolicy to a Tetragon pod selector. It translates match expressions and labels to match the Tetragon format."},{"Name":"ConvertLists","Description":"This function converts lists from a KubeAegisPolicy to Tetragon lists. It maps list specifications including names, patterns, types, and validation flags."},{"Name":"HandleMutateAnnotations","Description":"This function handles mutation rules for annotations in Kyverno policies. It processes intent requests specifying annotations to be mutated, generates a patch for the annotations, and returns a mutation object."},{"Name":"HandleMutateLabels","Description":"This function handles mutation rules for labels in Kyverno policies. It processes intent requests specifying labels to be mutated, generates a patch for the labels, and returns a mutation object."},{"Name":"HandleValidateCEL","Description":"This function handles validation rules for CEL expressions in Kyverno policies. It processes intent requests specifying CEL expressions for validation and returns a validation object."},{"Name":"HandleValidatePodSecurity","Description":"This function handCreateIngressProtocolRuleles validation rules for pod security in Kyverno policies. It processes intent requests specifying pod security levels and versions, and returns a validation object."},{"Name":"HandleValidateDeny","Description":"This function handles validation rules for deny conditions in Kyverno policies. It processes intent requests specifying conditions for denying resources, and returns a validation object with the specified conditions."},{"Name":"HandleValidatePattern","Description":"This function handles validation rules for patterns in Kyverno policies. It processes intent requests specifying patterns for validation and returns a validation object with the specified patterns."},{"Name":"HandleVerifyImage","Description":"This function handles image verification rules in Kyverno policies. It processes intent requests specifying images to be verified, and returns an image verification object with the specified verification details."}],
"fieldDescriptions":{".apiVersion":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",".kind":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",".metadata":"",".spec":"Spec is the desired Cilium specific rule specification.",".spec.description":"Description is a free form string, it can be used by the creator of the rule to store human readable explanation of the purpose of this rule. Rules cannot be identified by comment.",".spec.egress":"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.",".spec.egress.authentication":"Authentication is the required authentication type for the allowed traffic, if any.",".spec.egress.authentication.mode":"Mode is the required authentication mode for the allowed traffic, if any.",".spec.egress.icmps":"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \n Example: Any endpoint with the label \"app=httpd\" is allowed to initiate type 8 ICMP connections.",".spec.egress.icmps.fields":"Fields is a list of ICMP fields.",".spec.egress.icmps.fields.family":"Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.",".spec.egress.icmps.fields.type":"Type is a ICMP-type. It should be 0-255 (8bit).",".spec.egress.toCIDR":"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \n Example: Any endpoint with the label \"app=database-proxy\" is allowed to initiate connections to 10.2.3.0/24",".spec.egress.toCIDRSet":"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \n Example: Any endpoint with the label \"app=database-proxy\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.",".spec.egress.toCIDRSet.cidr":"CIDR is a CIDR prefix / IP Block.",".spec.egress.toCIDRSet.cidrGroupRef":"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.",".spec.egress.toCIDRSet.except":"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.",".spec.egress.toEndpoints":"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \n Example: Any endpoint with the label \"role=frontend\" can communicate with any endpoint carrying the label \"role=backend\".",".spec.egress.toEndpoints.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".spec.egress.toEndpoints.matchExpressions.key":"key is the label key that the selector applies to.",".spec.egress.toEndpoints.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".spec.egress.toEndpoints.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".spec.egress.toEndpoints.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".spec.egress.toEntities":"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are `world`, `cluster`,`host`,`remote-node`,`kube-apiserver`, `init`, `health`,`unmanaged` and `all`.",".spec.egress.toFQDNs":"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of `ToFQDN.MatchName`s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -\u003e IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.",".spec.egress.toFQDNs.matchName":"MatchName matches literal DNS names. A trailing \".\" is automatically added when missing.",".spec.egress.toFQDNs.matchPattern":"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \"*\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \"*\" as the leftmost character, without a following \".\" matches all subdomains as well as the name to the right. A trailing \".\" is automatically added when missing. \n Examples: `*.cilium.io` matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not `*cilium.io` matches cilium.io and all subdomains ends with \"cilium.io\" except those containing \".\" separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \"sub\" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not",".spec.egress.toGroups":"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'",".spec.egress.toGroups.aws":"AWSGroup is an structure that can be used to whitelisting information from AWS integration",".spec.egress.toGroups.aws.labels":"",".spec.egress.toGroups.aws.region":"",".spec.egress.toGroups.aws.securityGroupsIds":"",".spec.egress.toGroups.aws.securityGroupsNames":"",".spec.egress.toPorts":"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \n Example: Any endpoint with the label \"role=frontend\" is allowed to initiate connections to destination port 8080/tcp",".spec.egress.toPorts.listener":"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.",".spec.egress.toPorts.listener.envoyConfig":"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.",".spec.egress.toPorts.listener.envoyConfig.kind":"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.",".spec.egress.toPorts.listener.envoyConfig.name":"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.",".spec.egress.toPorts.listener.name":"Name is the name of the listener.",".spec.egress.toPorts.originatingTLS":"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.",".spec.egress.toPorts.originatingTLS.certificate":"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.",".spec.egress.toPorts.originatingTLS.privateKey":"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.",".spec.egress.toPorts.originatingTLS.secret":"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.",".spec.egress.toPorts.originatingTLS.secret.name":"Name is the name of the secret.",".spec.egress.toPorts.originatingTLS.secret.namespace":"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \"default\").",".spec.egress.toPorts.originatingTLS.trustedCA":"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.",".spec.egress.toPorts.ports":"Ports is a list of L4 port/protocol",".spec.egress.toPorts.ports.port":"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.",".spec.egress.toPorts.ports.protocol":"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \"TCP\", \"UDP\", \"SCTP\", \"ANY\" \n Matching on ICMP is not supported. \n Named port specified for a container may narrow this down, but may not contradict this.",".spec.egress.toPorts.rules":"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.",".spec.egress.toPorts.rules.dns":"DNS-specific rules.",".spec.egress.toPorts.rules.dns.matchName":"MatchName matches literal DNS names. A trailing \".\" is automatically added when missing.",".spec.egress.toPorts.rules.dns.matchPattern":"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \"*\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \"*\" as the leftmost character, without a following \".\" matches all subdomains as well as the name to the right. A trailing \".\" is automatically added when missing. \n Examples: `*.cilium.io` matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not `*cilium.io` matches cilium.io and all subdomains ends with \"cilium.io\" except those containing \".\" separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \"sub\" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not",".spec.egress.toPorts.rules.http":"HTTP specific rules.",".spec.egress.toPorts.rules.http.headerMatches":"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.",".spec.egress.toPorts.rules.http.headerMatches.mismatch":"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.",".spec.egress.toPorts.rules.http.headerMatches.name":"Name identifies the header.",".spec.egress.toPorts.rules.http.headerMatches.secret":"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \"Value\" specified, the match will fail.",".spec.egress.toPorts.rules.http.headerMatches.secret.name":"Name is the name of the secret.",".spec.egress.toPorts.rules.http.headerMatches.secret.namespace":"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \"default\").",".spec.egress.toPorts.rules.http.headerMatches.value":"Value matches the exact value of the header. Can be specified either alone or together with \"Secret\"; will be used as the header value if the secret can not be found in the latter case.",".spec.egress.toPorts.rules.http.headers":"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.",".spec.egress.toPorts.rules.http.host":"Host is an extended POSIX regex matched against the host header of a request, e.g. \"foo.com\" \n If omitted or empty, the value of the host header is ignored.",".spec.egress.toPorts.rules.http.method":"Method is an extended POSIX regex matched against the method of a request, e.g. \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", ... \n If omitted or empty, all methods are allowed.",".spec.egress.toPorts.rules.http.path":"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. \n If omitted or empty, all paths are all allowed.",".spec.egress.toPorts.rules.kafka":"Kafka-specific rules.",".spec.egress.toPorts.rules.kafka.apiKey":"APIKey is a case-insensitive string matched against the key of a request, e.g. \"produce\", \"fetch\", \"createtopic\", \"deletetopic\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \n If omitted or empty, and if Role is not specified, then all keys are allowed.",".spec.egress.toPorts.rules.kafka.apiVersion":"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \n If omitted or empty, all versions are allowed.",".spec.egress.toPorts.rules.kafka.clientID":"ClientID is the client identifier as provided in the request. \n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \n If omitted or empty, all client identifiers are allowed.",".spec.egress.toPorts.rules.kafka.role":"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \"produce\" or \"consume\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \n The following values are supported: - \"produce\": Allow producing to the topics specified in the rule - \"consume\": Allow consuming from the topics specified in the rule \n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \n If omitted or empty, and if APIKey is not specified, then all keys are allowed.",".spec.egress.toPorts.rules.kafka.topic":"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \n If omitted or empty, all topics are allowed.",".spec.egress.toPorts.rules.l7":"Key-value pair rules.",".spec.egress.toPorts.rules.l7proto":"Name of the L7 protocol for which the Key-value pair rules apply.",".spec.egress.toPorts.serverNames":"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.",".spec.egress.toPorts.terminatingTLS":"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.",".spec.egress.toPorts.terminatingTLS.certificate":"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.",".spec.egress.toPorts.terminatingTLS.privateKey":"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.",".spec.egress.toPorts.terminatingTLS.secret":"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.",".spec.egress.toPorts.terminatingTLS.secret.name":"Name is the name of the secret.",".spec.egress.toPorts.terminatingTLS.secret.namespace":"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \"default\").",".spec.egress.toPorts.terminatingTLS.trustedCA":"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.",".spec.egress.toRequires":"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \n Example: Any Endpoint with the label \"team=A\" requires any endpoint to which it communicates to also carry the label \"team=A\".",".spec.egress.toRequires.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".spec.egress.toRequires.matchExpressions.key":"key is the label key that the selector applies to.",".spec.egress.toRequires.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".spec.egress.toRequires.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".spec.egress.toRequires.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".spec.egress.toServices":"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \n Example: Any endpoint with the label \"app=backend-app\" is allowed to initiate connections to all cidrs backing the \"external-service\" service",".spec.egress.toServices.k8sService":"K8sService selects service by name and namespace pair",".spec.egress.toServices.k8sService.namespace":"",".spec.egress.toServices.k8sService.serviceName":"",".spec.egress.toServices.k8sServiceSelector":"K8sServiceSelector selects services by k8s labels and namespace",".spec.egress.toServices.k8sServiceSelector.namespace":"",".spec.egress.toServices.k8sServiceSelector.selector":"ServiceSelector is a label selector for k8s services",".spec.egress.toServices.k8sServiceSelector.selector.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.key":"key is the label key that the selector applies to.",".spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".spec.egress.toServices.k8sServiceSelector.selector.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".spec.egressDeny":"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.",".spec.egressDeny.icmps":"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \n Example: Any endpoint with the label \"app=httpd\" is not allowed to initiate type 8 ICMP connections.",".spec.egressDeny.icmps.fields":"Fields is a list of ICMP fields.",".spec.egressDeny.icmps.fields.family":"Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.",".spec.egressDeny.icmps.fields.type":"Type is a ICMP-type. It should be 0-255 (8bit).",".spec.egressDeny.toCIDR":"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \n Example: Any endpoint with the label \"app=database-proxy\" is allowed to initiate connections to 10.2.3.0/24",".spec.egressDeny.toCIDRSet":"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \n Example: Any endpoint with the label \"app=database-proxy\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.",".spec.egressDeny.toCIDRSet.cidr":"CIDR is a CIDR prefix / IP Block.",".spec.egressDeny.toCIDRSet.cidrGroupRef":"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.",".spec.egressDeny.toCIDRSet.except":"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.",".spec.egressDeny.toEndpoints":"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \n Example: Any endpoint with the label \"role=frontend\" can communicate with any endpoint carrying the label \"role=backend\".",".spec.egressDeny.toEndpoints.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".spec.egressDeny.toEndpoints.matchExpressions.key":"key is the label key that the selector applies to.",".spec.egressDeny.toEndpoints.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".spec.egressDeny.toEndpoints.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".spec.egressDeny.toEndpoints.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".spec.egressDeny.toEntities":"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are `world`, `cluster`,`host`,`remote-node`,`kube-apiserver`, `init`, `health`,`unmanaged` and `all`.",".spec.egressDeny.toGroups":"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'",".spec.egressDeny.toGroups.aws":"AWSGroup is an structure that can be used to whitelisting information from AWS integration",".spec.egressDeny.toGroups.aws.labels":"",".spec.egressDeny.toGroups.aws.region":"",".spec.egressDeny.toGroups.aws.securityGroupsIds":"",".spec.egressDeny.toGroups.aws.securityGroupsNames":"",".spec.egressDeny.toPorts":"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \n Example: Any endpoint with the label \"role=frontend\" is not allowed to initiate connections to destination port 8080/tcp",".spec.egressDeny.toPorts.ports":"Ports is a list of L4 port/protocol",".spec.egressDeny.toPorts.ports.port":"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.",".spec.egressDeny.toPorts.ports.protocol":"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \"TCP\", \"UDP\", \"SCTP\", \"ANY\" \n Matching on ICMP is not supported. \n Named port specified for a container may narrow this down, but may not contradict this.",".spec.egressDeny.toRequires":"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \n Example: Any Endpoint with the label \"team=A\" requires any endpoint to which it communicates to also carry the label \"team=A\".",".spec.egressDeny.toRequires.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".spec.egressDeny.toRequires.matchExpressions.key":"key is the label key that the selector applies to.",".spec.egressDeny.toRequires.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".spec.egressDeny.toRequires.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".spec.egressDeny.toRequires.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".spec.egressDeny.toServices":"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \n Example: Any endpoint with the label \"app=backend-app\" is allowed to initiate connections to all cidrs backing the \"external-service\" service",".spec.egressDeny.toServices.k8sService":"K8sService selects service by name and namespace pair",".spec.egressDeny.toServices.k8sService.namespace":"",".spec.egressDeny.toServices.k8sService.serviceName":"",".spec.egressDeny.toServices.k8sServiceSelector":"K8sServiceSelector selects services by k8s labels and namespace",".spec.egressDeny.toServices.k8sServiceSelector.namespace":"",".spec.egressDeny.toServices.k8sServiceSelector.selector":"ServiceSelector is a label selector for k8s services",".spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.key":"key is the label key that the selector applies to.",".spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".spec.egressDeny.toServices.k8sServiceSelector.selector.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".spec.endpointSelector":"EndpointSelector selects all endpoints which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive.",".spec.endpointSelector.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".spec.endpointSelector.matchExpressions.key":"key is the label key that the selector applies to.",".spec.endpointSelector.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".spec.endpointSelector.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".spec.endpointSelector.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".spec.ingress":"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.",".spec.ingress.authentication":"Authentication is the required authentication type for the allowed traffic, if any.",".spec.ingress.authentication.mode":"Mode is the required authentication mode for the allowed traffic, if any.",".spec.ingress.fromCIDR":"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do *not* originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \n Example: Any endpoint with the label \"app=my-legacy-pet\" is allowed to receive connections from 10.3.9.1",".spec.ingress.fromCIDRSet":"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \n Example: Any endpoint with the label \"app=my-legacy-pet\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.",".spec.ingress.fromCIDRSet.cidr":"CIDR is a CIDR prefix / IP Block.",".spec.ingress.fromCIDRSet.cidrGroupRef":"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.",".spec.ingress.fromCIDRSet.except":"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.",".spec.ingress.fromEndpoints":"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \n Example: Any endpoint with the label \"role=backend\" can be consumed by any endpoint carrying the label \"role=frontend\".",".spec.ingress.fromEndpoints.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".spec.ingress.fromEndpoints.matchExpressions.key":"key is the label key that the selector applies to.",".spec.ingress.fromEndpoints.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".spec.ingress.fromEndpoints.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".spec.ingress.fromEndpoints.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".spec.ingress.fromEntities":"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are `world`, `cluster` and `host`",".spec.ingress.fromRequires":"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \n Example: Any Endpoint with the label \"team=A\" requires consuming endpoint to also carry the label \"team=A\".",".spec.ingress.fromRequires.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".spec.ingress.fromRequires.matchExpressions.key":"key is the label key that the selector applies to.",".spec.ingress.fromRequires.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".spec.ingress.fromRequires.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".spec.ingress.fromRequires.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".spec.ingress.icmps":"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \n Example: Any endpoint with the label \"app=httpd\" can only accept incoming type 8 ICMP connections.",".spec.ingress.icmps.fields":"Fields is a list of ICMP fields.",".spec.ingress.icmps.fields.family":"Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.",".spec.ingress.icmps.fields.type":"Type is a ICMP-type. It should be 0-255 (8bit).",".spec.ingress.toPorts":"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \n Example: Any endpoint with the label \"app=httpd\" can only accept incoming connections on port 80/tcp.",".spec.ingress.toPorts.listener":"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.",".spec.ingress.toPorts.listener.envoyConfig":"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.",".spec.ingress.toPorts.listener.envoyConfig.kind":"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.",".spec.ingress.toPorts.listener.envoyConfig.name":"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.",".spec.ingress.toPorts.listener.name":"Name is the name of the listener.",".spec.ingress.toPorts.originatingTLS":"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.",".spec.ingress.toPorts.originatingTLS.certificate":"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.",".spec.ingress.toPorts.originatingTLS.privateKey":"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.",".spec.ingress.toPorts.originatingTLS.secret":"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.",".spec.ingress.toPorts.originatingTLS.secret.name":"Name is the name of the secret.",".spec.ingress.toPorts.originatingTLS.secret.namespace":"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \"default\").",".spec.ingress.toPorts.originatingTLS.trustedCA":"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.",".spec.ingress.toPorts.ports":"Ports is a list of L4 port/protocol",".spec.ingress.toPorts.ports.port":"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.",".spec.ingress.toPorts.ports.protocol":"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \"TCP\", \"UDP\", \"SCTP\", \"ANY\" \n Matching on ICMP is not supported. \n Named port specified for a container may narrow this down, but may not contradict this.",".spec.ingress.toPorts.rules":"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.",".spec.ingress.toPorts.rules.dns":"DNS-specific rules.",".spec.ingress.toPorts.rules.dns.matchName":"MatchName matches literal DNS names. A trailing \".\" is automatically added when missing.",".spec.ingress.toPorts.rules.dns.matchPattern":"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \"*\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \"*\" as the leftmost character, without a following \".\" matches all subdomains as well as the name to the right. A trailing \".\" is automatically added when missing. \n Examples: `*.cilium.io` matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not `*cilium.io` matches cilium.io and all subdomains ends with \"cilium.io\" except those containing \".\" separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \"sub\" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not",".spec.ingress.toPorts.rules.http":"HTTP specific rules.",".spec.ingress.toPorts.rules.http.headerMatches":"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.",".spec.ingress.toPorts.rules.http.headerMatches.mismatch":"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.",".spec.ingress.toPorts.rules.http.headerMatches.name":"Name identifies the header.",".spec.ingress.toPorts.rules.http.headerMatches.secret":"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \"Value\" specified, the match will fail.",".spec.ingress.toPorts.rules.http.headerMatches.secret.name":"Name is the name of the secret.",".spec.ingress.toPorts.rules.http.headerMatches.secret.namespace":"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \"default\").",".spec.ingress.toPorts.rules.http.headerMatches.value":"Value matches the exact value of the header. Can be specified either alone or together with \"Secret\"; will be used as the header value if the secret can not be found in the latter case.",".spec.ingress.toPorts.rules.http.headers":"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.",".spec.ingress.toPorts.rules.http.host":"Host is an extended POSIX regex matched against the host header of a request, e.g. \"foo.com\" \n If omitted or empty, the value of the host header is ignored.",".spec.ingress.toPorts.rules.http.method":"Method is an extended POSIX regex matched against the method of a request, e.g. \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", ... \n If omitted or empty, all methods are allowed.",".spec.ingress.toPorts.rules.http.path":"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. \n If omitted or empty, all paths are all allowed.",".spec.ingress.toPorts.rules.kafka":"Kafka-specific rules.",".spec.ingress.toPorts.rules.kafka.apiKey":"APIKey is a case-insensitive string matched against the key of a request, e.g. \"produce\", \"fetch\", \"createtopic\", \"deletetopic\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \n If omitted or empty, and if Role is not specified, then all keys are allowed.",".spec.ingress.toPorts.rules.kafka.apiVersion":"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \n If omitted or empty, all versions are allowed.",".spec.ingress.toPorts.rules.kafka.clientID":"ClientID is the client identifier as provided in the request. \n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \n If omitted or empty, all client identifiers are allowed.",".spec.ingress.toPorts.rules.kafka.role":"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \"produce\" or \"consume\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \n The following values are supported: - \"produce\": Allow producing to the topics specified in the rule - \"consume\": Allow consuming from the topics specified in the rule \n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \n If omitted or empty, and if APIKey is not specified, then all keys are allowed.",".spec.ingress.toPorts.rules.kafka.topic":"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \n If omitted or empty, all topics are allowed.",".spec.ingress.toPorts.rules.l7":"Key-value pair rules.",".spec.ingress.toPorts.rules.l7proto":"Name of the L7 protocol for which the Key-value pair rules apply.",".spec.ingress.toPorts.serverNames":"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.",".spec.ingress.toPorts.terminatingTLS":"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.",".spec.ingress.toPorts.terminatingTLS.certificate":"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.",".spec.ingress.toPorts.terminatingTLS.privateKey":"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.",".spec.ingress.toPorts.terminatingTLS.secret":"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.",".spec.ingress.toPorts.terminatingTLS.secret.name":"Name is the name of the secret.",".spec.ingress.toPorts.terminatingTLS.secret.namespace":"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \"default\").",".spec.ingress.toPorts.terminatingTLS.trustedCA":"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.",".spec.ingressDeny":"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.",".spec.ingressDeny.fromCIDR":"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do *not* originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \n Example: Any endpoint with the label \"app=my-legacy-pet\" is allowed to receive connections from 10.3.9.1",".spec.ingressDeny.fromCIDRSet":"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \n Example: Any endpoint with the label \"app=my-legacy-pet\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.",".spec.ingressDeny.fromCIDRSet.cidr":"CIDR is a CIDR prefix / IP Block.",".spec.ingressDeny.fromCIDRSet.cidrGroupRef":"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.",".spec.ingressDeny.fromCIDRSet.except":"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.",".spec.ingressDeny.fromEndpoints":"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \n Example: Any endpoint with the label \"role=backend\" can be consumed by any endpoint carrying the label \"role=frontend\".",".spec.ingressDeny.fromEndpoints.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".spec.ingressDeny.fromEndpoints.matchExpressions.key":"key is the label key that the selector applies to.",".spec.ingressDeny.fromEndpoints.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".spec.ingressDeny.fromEndpoints.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".spec.ingressDeny.fromEndpoints.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".spec.ingressDeny.fromEntities":"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are `world`, `cluster` and `host`",".spec.ingressDeny.fromRequires":"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \n Example: Any Endpoint with the label \"team=A\" requires consuming endpoint to also carry the label \"team=A\".",".spec.ingressDeny.fromRequires.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".spec.ingressDeny.fromRequires.matchExpressions.key":"key is the label key that the selector applies to.",".spec.ingressDeny.fromRequires.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".spec.ingressDeny.fromRequires.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".spec.ingressDeny.fromRequires.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".spec.ingressDeny.icmps":"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \n Example: Any endpoint with the label \"app=httpd\" can not accept incoming type 8 ICMP connections.",".spec.ingressDeny.icmps.fields":"Fields is a list of ICMP fields.",".spec.ingressDeny.icmps.fields.family":"Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.",".spec.ingressDeny.icmps.fields.type":"Type is a ICMP-type. It should be 0-255 (8bit).",".spec.ingressDeny.toPorts":"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \n Example: Any endpoint with the label \"app=httpd\" can not accept incoming connections on port 80/tcp.",".spec.ingressDeny.toPorts.ports":"Ports is a list of L4 port/protocol",".spec.ingressDeny.toPorts.ports.port":"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.",".spec.ingressDeny.toPorts.ports.protocol":"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \"TCP\", \"UDP\", \"SCTP\", \"ANY\" \n Matching on ICMP is not supported. \n Named port specified for a container may narrow this down, but may not contradict this.",".spec.labels":"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.",".spec.labels.key":"",".spec.labels.source":"Source can be one of the above values (e.g.: LabelSourceContainer).",".spec.labels.value":"",".spec.nodeSelector":"NodeSelector selects all nodes which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive. Can only be used in CiliumClusterwideNetworkPolicies.",".spec.nodeSelector.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".spec.nodeSelector.matchExpressions.key":"key is the label key that the selector applies to.",".spec.nodeSelector.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".spec.nodeSelector.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".spec.nodeSelector.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".specs":"Specs is a list of desired Cilium specific rule specification.",".specs.description":"Description is a free form string, it can be used by the creator of the rule to store human readable explanation of the purpose of this rule. Rules cannot be identified by comment.",".specs.egress":"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.",".specs.egress.authentication":"Authentication is the required authentication type for the allowed traffic, if any.",".specs.egress.authentication.mode":"Mode is the required authentication mode for the allowed traffic, if any.",".specs.egress.icmps":"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \n Example: Any endpoint with the label \"app=httpd\" is allowed to initiate type 8 ICMP connections.",".specs.egress.icmps.fields":"Fields is a list of ICMP fields.",".specs.egress.icmps.fields.family":"Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.",".specs.egress.icmps.fields.type":"Type is a ICMP-type. It should be 0-255 (8bit).",".specs.egress.toCIDR":"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \n Example: Any endpoint with the label \"app=database-proxy\" is allowed to initiate connections to 10.2.3.0/24",".specs.egress.toCIDRSet":"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \n Example: Any endpoint with the label \"app=database-proxy\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.",".specs.egress.toCIDRSet.cidr":"CIDR is a CIDR prefix / IP Block.",".specs.egress.toCIDRSet.cidrGroupRef":"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.",".specs.egress.toCIDRSet.except":"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.",".specs.egress.toEndpoints":"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \n Example: Any endpoint with the label \"role=frontend\" can communicate with any endpoint carrying the label \"role=backend\".",".specs.egress.toEndpoints.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".specs.egress.toEndpoints.matchExpressions.key":"key is the label key that the selector applies to.",".specs.egress.toEndpoints.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".specs.egress.toEndpoints.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".specs.egress.toEndpoints.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".specs.egress.toEntities":"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are `world`, `cluster`,`host`,`remote-node`,`kube-apiserver`, `init`, `health`,`unmanaged` and `all`.",".specs.egress.toFQDNs":"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of `ToFQDN.MatchName`s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -\u003e IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.",".specs.egress.toFQDNs.matchName":"MatchName matches literal DNS names. A trailing \".\" is automatically added when missing.",".specs.egress.toFQDNs.matchPattern":"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \"*\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \"*\" as the leftmost character, without a following \".\" matches all subdomains as well as the name to the right. A trailing \".\" is automatically added when missing. \n Examples: `*.cilium.io` matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not `*cilium.io` matches cilium.io and all subdomains ends with \"cilium.io\" except those containing \".\" separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \"sub\" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not",".specs.egress.toGroups":"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'",".specs.egress.toGroups.aws":"AWSGroup is an structure that can be used to whitelisting information from AWS integration",".specs.egress.toGroups.aws.labels":"",".specs.egress.toGroups.aws.region":"",".specs.egress.toGroups.aws.securityGroupsIds":"",".specs.egress.toGroups.aws.securityGroupsNames":"",".specs.egress.toPorts":"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \n Example: Any endpoint with the label \"role=frontend\" is allowed to initiate connections to destination port 8080/tcp",".specs.egress.toPorts.listener":"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.",".specs.egress.toPorts.listener.envoyConfig":"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.",".specs.egress.toPorts.listener.envoyConfig.kind":"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.",".specs.egress.toPorts.listener.envoyConfig.name":"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.",".specs.egress.toPorts.listener.name":"Name is the name of the listener.",".specs.egress.toPorts.originatingTLS":"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.",".specs.egress.toPorts.originatingTLS.certificate":"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.",".specs.egress.toPorts.originatingTLS.privateKey":"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.",".specs.egress.toPorts.originatingTLS.secret":"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.",".specs.egress.toPorts.originatingTLS.secret.name":"Name is the name of the secret.",".specs.egress.toPorts.originatingTLS.secret.namespace":"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \"default\").",".specs.egress.toPorts.originatingTLS.trustedCA":"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.",".specs.egress.toPorts.ports":"Ports is a list of L4 port/protocol",".specs.egress.toPorts.ports.port":"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.",".specs.egress.toPorts.ports.protocol":"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \"TCP\", \"UDP\", \"SCTP\", \"ANY\" \n Matching on ICMP is not supported. \n Named port specified for a container may narrow this down, but may not contradict this.",".specs.egress.toPorts.rules":"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.",".specs.egress.toPorts.rules.dns":"DNS-specific rules.",".specs.egress.toPorts.rules.dns.matchName":"MatchName matches literal DNS names. A trailing \".\" is automatically added when missing.",".specs.egress.toPorts.rules.dns.matchPattern":"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \"*\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \"*\" as the leftmost character, without a following \".\" matches all subdomains as well as the name to the right. A trailing \".\" is automatically added when missing. \n Examples: `*.cilium.io` matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not `*cilium.io` matches cilium.io and all subdomains ends with \"cilium.io\" except those containing \".\" separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \"sub\" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not",".specs.egress.toPorts.rules.http":"HTTP specific rules.",".specs.egress.toPorts.rules.http.headerMatches":"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.",".specs.egress.toPorts.rules.http.headerMatches.mismatch":"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.",".specs.egress.toPorts.rules.http.headerMatches.name":"Name identifies the header.",".specs.egress.toPorts.rules.http.headerMatches.secret":"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \"Value\" specified, the match will fail.",".specs.egress.toPorts.rules.http.headerMatches.secret.name":"Name is the name of the secret.",".specs.egress.toPorts.rules.http.headerMatches.secret.namespace":"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \"default\").",".specs.egress.toPorts.rules.http.headerMatches.value":"Value matches the exact value of the header. Can be specified either alone or together with \"Secret\"; will be used as the header value if the secret can not be found in the latter case.",".specs.egress.toPorts.rules.http.headers":"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.",".specs.egress.toPorts.rules.http.host":"Host is an extended POSIX regex matched against the host header of a request, e.g. \"foo.com\" \n If omitted or empty, the value of the host header is ignored.",".specs.egress.toPorts.rules.http.method":"Method is an extended POSIX regex matched against the method of a request, e.g. \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", ... \n If omitted or empty, all methods are allowed.",".specs.egress.toPorts.rules.http.path":"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. \n If omitted or empty, all paths are all allowed.",".specs.egress.toPorts.rules.kafka":"Kafka-specific rules.",".specs.egress.toPorts.rules.kafka.apiKey":"APIKey is a case-insensitive string matched against the key of a request, e.g. \"produce\", \"fetch\", \"createtopic\", \"deletetopic\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \n If omitted or empty, and if Role is not specified, then all keys are allowed.",".specs.egress.toPorts.rules.kafka.apiVersion":"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \n If omitted or empty, all versions are allowed.",".specs.egress.toPorts.rules.kafka.clientID":"ClientID is the client identifier as provided in the request. \n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \n If omitted or empty, all client identifiers are allowed.",".specs.egress.toPorts.rules.kafka.role":"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \"produce\" or \"consume\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \n The following values are supported: - \"produce\": Allow producing to the topics specified in the rule - \"consume\": Allow consuming from the topics specified in the rule \n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \n If omitted or empty, and if APIKey is not specified, then all keys are allowed.",".specs.egress.toPorts.rules.kafka.topic":"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \n If omitted or empty, all topics are allowed.",".specs.egress.toPorts.rules.l7":"Key-value pair rules.",".specs.egress.toPorts.rules.l7proto":"Name of the L7 protocol for which the Key-value pair rules apply.",".specs.egress.toPorts.serverNames":"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.",".specs.egress.toPorts.terminatingTLS":"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.",".specs.egress.toPorts.terminatingTLS.certificate":"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.",".specs.egress.toPorts.terminatingTLS.privateKey":"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.",".specs.egress.toPorts.terminatingTLS.secret":"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.",".specs.egress.toPorts.terminatingTLS.secret.name":"Name is the name of the secret.",".specs.egress.toPorts.terminatingTLS.secret.namespace":"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \"default\").",".specs.egress.toPorts.terminatingTLS.trustedCA":"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.",".specs.egress.toRequires":"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \n Example: Any Endpoint with the label \"team=A\" requires any endpoint to which it communicates to also carry the label \"team=A\".",".specs.egress.toRequires.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".specs.egress.toRequires.matchExpressions.key":"key is the label key that the selector applies to.",".specs.egress.toRequires.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".specs.egress.toRequires.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".specs.egress.toRequires.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".specs.egress.toServices":"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \n Example: Any endpoint with the label \"app=backend-app\" is allowed to initiate connections to all cidrs backing the \"external-service\" service",".specs.egress.toServices.k8sService":"K8sService selects service by name and namespace pair",".specs.egress.toServices.k8sService.namespace":"",".specs.egress.toServices.k8sService.serviceName":"",".specs.egress.toServices.k8sServiceSelector":"K8sServiceSelector selects services by k8s labels and namespace",".specs.egress.toServices.k8sServiceSelector.namespace":"",".specs.egress.toServices.k8sServiceSelector.selector":"ServiceSelector is a label selector for k8s services",".specs.egress.toServices.k8sServiceSelector.selector.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.key":"key is the label key that the selector applies to.",".specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".specs.egress.toServices.k8sServiceSelector.selector.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".specs.egressDeny":"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.",".specs.egressDeny.icmps":"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \n Example: Any endpoint with the label \"app=httpd\" is not allowed to initiate type 8 ICMP connections.",".specs.egressDeny.icmps.fields":"Fields is a list of ICMP fields.",".specs.egressDeny.icmps.fields.family":"Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.",".specs.egressDeny.icmps.fields.type":"Type is a ICMP-type. It should be 0-255 (8bit).",".specs.egressDeny.toCIDR":"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \n Example: Any endpoint with the label \"app=database-proxy\" is allowed to initiate connections to 10.2.3.0/24",".specs.egressDeny.toCIDRSet":"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \n Example: Any endpoint with the label \"app=database-proxy\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.",".specs.egressDeny.toCIDRSet.cidr":"CIDR is a CIDR prefix / IP Block.",".specs.egressDeny.toCIDRSet.cidrGroupRef":"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.",".specs.egressDeny.toCIDRSet.except":"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.",".specs.egressDeny.toEndpoints":"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \n Example: Any endpoint with the label \"role=frontend\" can communicate with any endpoint carrying the label \"role=backend\".",".specs.egressDeny.toEndpoints.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".specs.egressDeny.toEndpoints.matchExpressions.key":"key is the label key that the selector applies to.",".specs.egressDeny.toEndpoints.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".specs.egressDeny.toEndpoints.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".specs.egressDeny.toEndpoints.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".specs.egressDeny.toEntities":"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are `world`, `cluster`,`host`,`remote-node`,`kube-apiserver`, `init`, `health`,`unmanaged` and `all`.",".specs.egressDeny.toGroups":"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'",".specs.egressDeny.toGroups.aws":"AWSGroup is an structure that can be used to whitelisting information from AWS integration",".specs.egressDeny.toGroups.aws.labels":"",".specs.egressDeny.toGroups.aws.region":"",".specs.egressDeny.toGroups.aws.securityGroupsIds":"",".specs.egressDeny.toGroups.aws.securityGroupsNames":"",".specs.egressDeny.toPorts":"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \n Example: Any endpoint with the label \"role=frontend\" is not allowed to initiate connections to destination port 8080/tcp",".specs.egressDeny.toPorts.ports":"Ports is a list of L4 port/protocol",".specs.egressDeny.toPorts.ports.port":"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.",".specs.egressDeny.toPorts.ports.protocol":"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \"TCP\", \"UDP\", \"SCTP\", \"ANY\" \n Matching on ICMP is not supported. \n Named port specified for a container may narrow this down, but may not contradict this.",".specs.egressDeny.toRequires":"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \n Example: Any Endpoint with the label \"team=A\" requires any endpoint to which it communicates to also carry the label \"team=A\".",".specs.egressDeny.toRequires.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".specs.egressDeny.toRequires.matchExpressions.key":"key is the label key that the selector applies to.",".specs.egressDeny.toRequires.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".specs.egressDeny.toRequires.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".specs.egressDeny.toRequires.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".specs.egressDeny.toServices":"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \n Example: Any endpoint with the label \"app=backend-app\" is allowed to initiate connections to all cidrs backing the \"external-service\" service",".specs.egressDeny.toServices.k8sService":"K8sService selects service by name and namespace pair",".specs.egressDeny.toServices.k8sService.namespace":"",".specs.egressDeny.toServices.k8sService.serviceName":"",".specs.egressDeny.toServices.k8sServiceSelector":"K8sServiceSelector selects services by k8s labels and namespace",".specs.egressDeny.toServices.k8sServiceSelector.namespace":"",".specs.egressDeny.toServices.k8sServiceSelector.selector":"ServiceSelector is a label selector for k8s services",".specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.key":"key is the label key that the selector applies to.",".specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".specs.egressDeny.toServices.k8sServiceSelector.selector.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".specs.endpointSelector":"EndpointSelector selects all endpoints which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive.",".specs.endpointSelector.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".specs.endpointSelector.matchExpressions.key":"key is the label key that the selector applies to.",".specs.endpointSelector.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".specs.endpointSelector.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".specs.endpointSelector.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".specs.ingress":"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.",".specs.ingress.authentication":"Authentication is the required authentication type for the allowed traffic, if any.",".specs.ingress.authentication.mode":"Mode is the required authentication mode for the allowed traffic, if any.",".specs.ingress.fromCIDR":"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do *not* originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \n Example: Any endpoint with the label \"app=my-legacy-pet\" is allowed to receive connections from 10.3.9.1",".specs.ingress.fromCIDRSet":"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \n Example: Any endpoint with the label \"app=my-legacy-pet\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.",".specs.ingress.fromCIDRSet.cidr":"CIDR is a CIDR prefix / IP Block.",".specs.ingress.fromCIDRSet.cidrGroupRef":"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.",".specs.ingress.fromCIDRSet.except":"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.",".specs.ingress.fromEndpoints":"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \n Example: Any endpoint with the label \"role=backend\" can be consumed by any endpoint carrying the label \"role=frontend\".",".specs.ingress.fromEndpoints.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".specs.ingress.fromEndpoints.matchExpressions.key":"key is the label key that the selector applies to.",".specs.ingress.fromEndpoints.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".specs.ingress.fromEndpoints.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".specs.ingress.fromEndpoints.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".specs.ingress.fromEntities":"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are `world`, `cluster` and `host`",".specs.ingress.fromRequires":"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \n Example: Any Endpoint with the label \"team=A\" requires consuming endpoint to also carry the label \"team=A\".",".specs.ingress.fromRequires.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".specs.ingress.fromRequires.matchExpressions.key":"key is the label key that the selector applies to.",".specs.ingress.fromRequires.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".specs.ingress.fromRequires.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".specs.ingress.fromRequires.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".specs.ingress.icmps":"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \n Example: Any endpoint with the label \"app=httpd\" can only accept incoming type 8 ICMP connections.",".specs.ingress.icmps.fields":"Fields is a list of ICMP fields.",".specs.ingress.icmps.fields.family":"Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.",".specs.ingress.icmps.fields.type":"Type is a ICMP-type. It should be 0-255 (8bit).",".specs.ingress.toPorts":"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \n Example: Any endpoint with the label \"app=httpd\" can only accept incoming connections on port 80/tcp.",".specs.ingress.toPorts.listener":"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.",".specs.ingress.toPorts.listener.envoyConfig":"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.",".specs.ingress.toPorts.listener.envoyConfig.kind":"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.",".specs.ingress.toPorts.listener.envoyConfig.name":"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.",".specs.ingress.toPorts.listener.name":"Name is the name of the listener.",".specs.ingress.toPorts.originatingTLS":"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.",".specs.ingress.toPorts.originatingTLS.certificate":"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.",".specs.ingress.toPorts.originatingTLS.privateKey":"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.",".specs.ingress.toPorts.originatingTLS.secret":"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.",".specs.ingress.toPorts.originatingTLS.secret.name":"Name is the name of the secret.",".specs.ingress.toPorts.originatingTLS.secret.namespace":"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \"default\").",".specs.ingress.toPorts.originatingTLS.trustedCA":"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.",".specs.ingress.toPorts.ports":"Ports is a list of L4 port/protocol",".specs.ingress.toPorts.ports.port":"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.",".specs.ingress.toPorts.ports.protocol":"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \"TCP\", \"UDP\", \"SCTP\", \"ANY\" \n Matching on ICMP is not supported. \n Named port specified for a container may narrow this down, but may not contradict this.",".specs.ingress.toPorts.rules":"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.",".specs.ingress.toPorts.rules.dns":"DNS-specific rules.",".specs.ingress.toPorts.rules.dns.matchName":"MatchName matches literal DNS names. A trailing \".\" is automatically added when missing.",".specs.ingress.toPorts.rules.dns.matchPattern":"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \"*\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \"*\" as the leftmost character, without a following \".\" matches all subdomains as well as the name to the right. A trailing \".\" is automatically added when missing. \n Examples: `*.cilium.io` matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not `*cilium.io` matches cilium.io and all subdomains ends with \"cilium.io\" except those containing \".\" separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \"sub\" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not",".specs.ingress.toPorts.rules.http":"HTTP specific rules.",".specs.ingress.toPorts.rules.http.headerMatches":"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.",".specs.ingress.toPorts.rules.http.headerMatches.mismatch":"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.",".specs.ingress.toPorts.rules.http.headerMatches.name":"Name identifies the header.",".specs.ingress.toPorts.rules.http.headerMatches.secret":"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \"Value\" specified, the match will fail.",".specs.ingress.toPorts.rules.http.headerMatches.secret.name":"Name is the name of the secret.",".specs.ingress.toPorts.rules.http.headerMatches.secret.namespace":"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \"default\").",".specs.ingress.toPorts.rules.http.headerMatches.value":"Value matches the exact value of the header. Can be specified either alone or together with \"Secret\"; will be used as the header value if the secret can not be found in the latter case.",".specs.ingress.toPorts.rules.http.headers":"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.",".specs.ingress.toPorts.rules.http.host":"Host is an extended POSIX regex matched against the host header of a request, e.g. \"foo.com\" \n If omitted or empty, the value of the host header is ignored.",".specs.ingress.toPorts.rules.http.method":"Method is an extended POSIX regex matched against the method of a request, e.g. \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", ... \n If omitted or empty, all methods are allowed.",".specs.ingress.toPorts.rules.http.path":"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. \n If omitted or empty, all paths are all allowed.",".specs.ingress.toPorts.rules.kafka":"Kafka-specific rules.",".specs.ingress.toPorts.rules.kafka.apiKey":"APIKey is a case-insensitive string matched against the key of a request, e.g. \"produce\", \"fetch\", \"createtopic\", \"deletetopic\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \n If omitted or empty, and if Role is not specified, then all keys are allowed.",".specs.ingress.toPorts.rules.kafka.apiVersion":"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \n If omitted or empty, all versions are allowed.",".specs.ingress.toPorts.rules.kafka.clientID":"ClientID is the client identifier as provided in the request. \n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \n If omitted or empty, all client identifiers are allowed.",".specs.ingress.toPorts.rules.kafka.role":"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \"produce\" or \"consume\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \n The following values are supported: - \"produce\": Allow producing to the topics specified in the rule - \"consume\": Allow consuming from the topics specified in the rule \n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \n If omitted or empty, and if APIKey is not specified, then all keys are allowed.",".specs.ingress.toPorts.rules.kafka.topic":"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \n If omitted or empty, all topics are allowed.",".specs.ingress.toPorts.rules.l7":"Key-value pair rules.",".specs.ingress.toPorts.rules.l7proto":"Name of the L7 protocol for which the Key-value pair rules apply.",".specs.ingress.toPorts.serverNames":"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.",".specs.ingress.toPorts.terminatingTLS":"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.",".specs.ingress.toPorts.terminatingTLS.certificate":"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.",".specs.ingress.toPorts.terminatingTLS.privateKey":"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.",".specs.ingress.toPorts.terminatingTLS.secret":"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.",".specs.ingress.toPorts.terminatingTLS.secret.name":"Name is the name of the secret.",".specs.ingress.toPorts.terminatingTLS.secret.namespace":"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \"default\").",".specs.ingress.toPorts.terminatingTLS.trustedCA":"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.",".specs.ingressDeny":"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.",".specs.ingressDeny.fromCIDR":"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do *not* originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \n Example: Any endpoint with the label \"app=my-legacy-pet\" is allowed to receive connections from 10.3.9.1",".specs.ingressDeny.fromCIDRSet":"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \n Example: Any endpoint with the label \"app=my-legacy-pet\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.",".specs.ingressDeny.fromCIDRSet.cidr":"CIDR is a CIDR prefix / IP Block.",".specs.ingressDeny.fromCIDRSet.cidrGroupRef":"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.",".specs.ingressDeny.fromCIDRSet.except":"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.",".specs.ingressDeny.fromEndpoints":"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \n Example: Any endpoint with the label \"role=backend\" can be consumed by any endpoint carrying the label \"role=frontend\".",".specs.ingressDeny.fromEndpoints.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".specs.ingressDeny.fromEndpoints.matchExpressions.key":"key is the label key that the selector applies to.",".specs.ingressDeny.fromEndpoints.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".specs.ingressDeny.fromEndpoints.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".specs.ingressDeny.fromEndpoints.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".specs.ingressDeny.fromEntities":"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are `world`, `cluster` and `host`",".specs.ingressDeny.fromRequires":"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \n Example: Any Endpoint with the label \"team=A\" requires consuming endpoint to also carry the label \"team=A\".",".specs.ingressDeny.fromRequires.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".specs.ingressDeny.fromRequires.matchExpressions.key":"key is the label key that the selector applies to.",".specs.ingressDeny.fromRequires.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".specs.ingressDeny.fromRequires.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".specs.ingressDeny.fromRequires.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".specs.ingressDeny.icmps":"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \n Example: Any endpoint with the label \"app=httpd\" can not accept incoming type 8 ICMP connections.",".specs.ingressDeny.icmps.fields":"Fields is a list of ICMP fields.",".specs.ingressDeny.icmps.fields.family":"Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.",".specs.ingressDeny.icmps.fields.type":"Type is a ICMP-type. It should be 0-255 (8bit).",".specs.ingressDeny.toPorts":"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \n Example: Any endpoint with the label \"app=httpd\" can not accept incoming connections on port 80/tcp.",".specs.ingressDeny.toPorts.ports":"Ports is a list of L4 port/protocol",".specs.ingressDeny.toPorts.ports.port":"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.",".specs.ingressDeny.toPorts.ports.protocol":"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \"TCP\", \"UDP\", \"SCTP\", \"ANY\" \n Matching on ICMP is not supported. \n Named port specified for a container may narrow this down, but may not contradict this.",".specs.labels":"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.",".specs.labels.key":"",".specs.labels.source":"Source can be one of the above values (e.g.: LabelSourceContainer).",".specs.labels.value":"",".specs.nodeSelector":"NodeSelector selects all nodes which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive. Can only be used in CiliumClusterwideNetworkPolicies.",".specs.nodeSelector.matchExpressions":"matchExpressions is a list of label selector requirements. The requirements are ANDed.",".specs.nodeSelector.matchExpressions.key":"key is the label key that the selector applies to.",".specs.nodeSelector.matchExpressions.operator":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",".specs.nodeSelector.matchExpressions.values":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",".specs.nodeSelector.matchLabels":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",".status":"Status is the status of the Cilium policy rule",".status.derivativePolicies":"DerivativePolicies is the status of all policies derived from the Cilium policy",".status.nodes":"Nodes is the Cilium policy status for each node"}}